"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""

import logging
from datetime import datetime, timedelta
from aiogram import types
from aiogram.types import FSInputFile
from database.database import SessionLocal
from database.models import User, UserStep
from funnel.messages import get_welcome_message

async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = db.query(User).filter(User.user_id == user.id).first()
        if not existing_user:
            new_user = User(
                user_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            db.add(new_user)
            db.commit()
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        else:
            await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!")
    finally:
        db.close()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text, _ = get_welcome_message()
    await message.answer(welcome_text, parse_mode="Markdown")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª —Å—Ä–∞–∑—É
    try:
        pdf_file = FSInputFile('/app/files/5_errors_bot_beginners.pdf')
        await message.bot.send_document(
            chat_id=user.id,
            document=pdf_file,
            caption="üéÅ –í–∞—à –ø–æ–¥–∞—Ä–æ–∫ –≥–æ—Ç–æ–≤!\n\n*¬´5 –æ—à–∏–±–æ–∫, –∏–∑-–∑–∞ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–æ–≤–∏—á–∫–∏ –º—É—á–∞—é—Ç—Å—è —Å –±–æ—Ç–∞–º–∏¬ª*\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç —á–µ–∫-–ª–∏—Å—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–æ–≤!\n\nüí° –•–æ—Ç–∏—Ç–µ –Ω–∞—É—á–∏—Ç—å—Å—è —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∞–∫–∏—Ö –±–æ—Ç–æ–≤? –ö—É—Ä—Å –ø–æ aiogram 3:\nhttps://stepik.org/course/220554",
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}")
        await message.answer("–§–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ (—á–µ—Ä–µ–∑ —á–∞—Å –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞) –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —à–∞–≥ hour_letter –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_step = db.query(UserStep).filter(
            UserStep.user_id == user.id,
            UserStep.step_name == 'hour_letter'
        ).first()
        
        if not existing_step:
            hour_letter_step = UserStep(
                user_id=user.id,
                step_name='hour_letter',
                scheduled_time=datetime.utcnow() + timedelta(hours=1)
            )
            db.add(hour_letter_step)
            db.commit()
            logging.info(f"–°–æ–∑–¥–∞–Ω —à–∞–≥ hour_letter –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        else:
            logging.info(f"–®–∞–≥ hour_letter —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    finally:
        db.close()
