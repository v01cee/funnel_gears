"""–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"""

import logging
from aiogram import types, Router
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database.database import SessionLocal, engine
from database.models import Base, User, UserStep
from sqlalchemy import text
from config.settings import ADMIN_ID

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
admin_router = Router()

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
ADMIN_IDS = [ADMIN_ID] if ADMIN_ID else []

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in ADMIN_IDS

@admin_router.message(Command("admin"))
async def admin_panel(message: types.Message):
    """–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∫–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton(text="üóëÔ∏è –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ë–î", callback_data="admin_recreate_db")
        ],
        [
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            InlineKeyboardButton(text="üìù –®–∞–≥–∏ –≤–æ—Ä–æ–Ω–∫–∏", callback_data="admin_steps")
        ],
        [
            InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Ä–æ–Ω–∫—É", callback_data="admin_start_funnel"),
            InlineKeyboardButton(text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Ä–æ–Ω–∫—É", callback_data="admin_stop_funnel")
        ]
    ])
    
    await message.answer(
        "üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@admin_router.callback_query(lambda c: c.data == "admin_stats")
async def show_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    db = SessionLocal()
    try:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = db.query(User).count()
        total_steps = db.query(UserStep).count()
        sent_steps = db.query(UserStep).filter(UserStep.sent == True).count()
        pending_steps = db.query(UserStep).filter(UserStep.sent == False).count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —à–∞–≥–∞–º
        steps_stats = db.query(
            UserStep.step_name,
            db.func.count(UserStep.id).label('count'),
            db.func.count(db.case([(UserStep.sent == True, 1)], else_=0)).label('sent_count')
        ).group_by(UserStep.step_name).all()
        
        stats_text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
        stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        stats_text += f"üìù –í—Å–µ–≥–æ —à–∞–≥–æ–≤: {total_steps}\n"
        stats_text += f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_steps}\n"
        stats_text += f"‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {pending_steps}\n\n"
        stats_text += f"üìà **–ü–æ —à–∞–≥–∞–º:**\n"
        
        for step_name, count, sent_count in steps_stats:
            stats_text += f"‚Ä¢ {step_name}: {sent_count}/{count}\n"
        
        await callback.message.edit_text(
            stats_text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )
    finally:
        db.close()

@admin_router.callback_query(lambda c: c.data == "admin_recreate_db")
async def recreate_database(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        Base.metadata.drop_all(bind=engine)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∑–∞–Ω–æ–≤–æ
        Base.metadata.create_all(bind=engine)
        
        await callback.message.edit_text(
            "‚úÖ **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞!**\n\n"
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã, —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –∑–∞–Ω–æ–≤–æ.",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )
        
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –ë–î:**\n\n{str(e)}",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –ë–î: {e}")

@admin_router.callback_query(lambda c: c.data == "admin_users")
async def show_users(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    db = SessionLocal()
    try:
        users = db.query(User).order_by(User.created_at.desc()).limit(10).all()
        
        users_text = "üë• **–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n"
        for user in users:
            username = f"@{user.username}" if user.username else "–±–µ–∑ username"
            users_text += f"‚Ä¢ {user.first_name} ({username})\n"
            users_text += f"  ID: {user.user_id}\n"
            users_text += f"  –î–∞—Ç–∞: {user.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        await callback.message.edit_text(
            users_text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )
    finally:
        db.close()

@admin_router.callback_query(lambda c: c.data == "admin_steps")
async def show_steps(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —à–∞–≥–∏ –≤–æ—Ä–æ–Ω–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    db = SessionLocal()
    try:
        steps = db.query(UserStep).order_by(UserStep.created_at.desc()).limit(20).all()
        
        steps_text = "üìù **–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —à–∞–≥–æ–≤ –≤–æ—Ä–æ–Ω–∫–∏:**\n\n"
        for step in steps:
            status = "‚úÖ" if step.sent else "‚è≥"
            steps_text += f"{status} {step.step_name}\n"
            steps_text += f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {step.user_id}\n"
            steps_text += f"  –í—Ä–µ–º—è: {step.scheduled_time.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        await callback.message.edit_text(
            steps_text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )
    finally:
        db.close()

@admin_router.callback_query(lambda c: c.data == "admin_start_funnel")
async def start_funnel_for_all(callback: types.CallbackQuery):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Ä–æ–Ω–∫—É –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    db = SessionLocal()
    try:
        from datetime import datetime, timedelta
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —à–∞–≥–æ–≤ –≤–æ—Ä–æ–Ω–∫–∏
        users_without_steps = db.query(User).filter(
            ~User.user_id.in_(
                db.query(UserStep.user_id).distinct()
            )
        ).all()
        
        created_count = 0
        for user in users_without_steps:
            try:
                hour_letter_step = UserStep(
                    user_id=user.user_id,
                    step_name='hour_letter',
                    scheduled_time=datetime.utcnow() + timedelta(days=1)  # –ß–µ—Ä–µ–∑ –¥–µ–Ω—å
                )
                db.add(hour_letter_step)
                created_count += 1
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —à–∞–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}: {e}")
        
        db.commit()
        
        await callback.message.edit_text(
            f"üöÄ **–í–æ—Ä–æ–Ω–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!**\n\n"
            f"–°–æ–∑–¥–∞–Ω–æ —à–∞–≥–æ–≤: {created_count}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(users_without_steps)}",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )
    finally:
        db.close()

@admin_router.callback_query(lambda c: c.data == "admin_stop_funnel")
async def stop_funnel(callback: types.CallbackQuery):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Ä–æ–Ω–∫—É (—É–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —à–∞–≥–∏)"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    db = SessionLocal()
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —à–∞–≥–∏
        deleted_count = db.query(UserStep).filter(UserStep.sent == False).delete()
        db.commit()
        
        await callback.message.edit_text(
            f"‚èπÔ∏è **–í–æ—Ä–æ–Ω–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!**\n\n"
            f"–£–¥–∞–ª–µ–Ω–æ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤: {deleted_count}",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )
    finally:
        db.close()

@admin_router.callback_query(lambda c: c.data == "admin_back")
async def back_to_admin(callback: types.CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton(text="üóëÔ∏è –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ë–î", callback_data="admin_recreate_db")
        ],
        [
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            InlineKeyboardButton(text="üìù –®–∞–≥–∏ –≤–æ—Ä–æ–Ω–∫–∏", callback_data="admin_steps")
        ],
        [
            InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Ä–æ–Ω–∫—É", callback_data="admin_start_funnel"),
            InlineKeyboardButton(text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Ä–æ–Ω–∫—É", callback_data="admin_stop_funnel")
        ]
    ])
    
    await callback.message.edit_text(
        "üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
